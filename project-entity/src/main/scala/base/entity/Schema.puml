@startuml
!define id(x) class x << U,white,Id >>
!define hash(x) class x << H,white,Hash >>
!define int(x) class x << I,white,Int >>
!define list(x) class x << L,white,List >>
!define set(x) class x << S,white,Set >>
!define json(x) class x << J,white,Json >>
!define simple(x) class x << K,white,Simple >>
!define key(x) <u><b>x</b></u>
hide methods
hide stereotypes

skinparam class {

    borderColor Black
    backgroundColor<<Id>> Gold
    backgroundColor<<Hash>> LightSalmon
    backgroundColor<<Int>> Gold
    backgroundColor<<List>> GreenYellow
    backgroundColor<<Set>> Plum
    backgroundColor<<Json>> Pink
    backgroundColor<<Simple>> LightBlue

}

package user {

    id(UserId)

    hash(Device)<<OO>> {
        key(deviceId)
        + userId
        + appVersion
        + locale
        + model
        + cordova
        + platform
        + version
    }

    hash(User) {
        key(userId)
        + name
        + gender
        + facebookId
        + deviceId
        + phone
        + phoneCode
        + phoneVerified
        + locale
        + lastLoginTime
    }

    simple(FacebookUser) {
        key(facebookId)
        + userId
    }

    simple(Phone) {
        key(phone)
        + userId
    }

    int(PhoneCooldown) {
        key(phone)
        Exists
    }

    set(PhoneGroupsInvited) {
        key(phone)
        GroupId
    }

    set(UserGroupsInvited) {
        key(userId)
        GroupId
    }

    set(UserPhonesInvited) {
        key(userId)
        Phone
    }

    simple(UserPhoneLabel) {
        key(userId+phone)
        Label
    }

    set(UserGroups) {
        key(userId)
        GroupId
    }

    set(UserQuestions) {
        key(userId)
        QuestionIdComposite
    }

}

package facebook {

    note left of "FacebookInfo"
        Expires after 30 days,
        is intended as a cache
    end note

    json(FacebookInfo) {
        key(token)
        - facebookId
        - firstName
        - gender
        - locale
    }

}

package group {

    id(GroupId)

    hash(Group) {
        key(groupId)
        + lastEventTime
        + eventCount
    }

    hash(GroupUser) {
        key(groupId+userId)
        + lastReadTime
    }

    list(GroupEvents) {
        key(groupId)
        - id
        - groupId
        - userId
        - type
        - body
        - time
    }

    set(GroupQuestions) {
        key(groupId)
        QuestionIdComposite
    }

    package GroupUserQuestion #White/Plum {

        set(GroupUserQuestions) {
            key(groupId+userId)
            QuestionIdComposite
        }

        set(GroupUserQuestionsTemp) {
            key(groupId+userId)
            QuestionIdComposite
        }

        set(GroupUserQuestionsYes) {
            key(groupId+userId)
            QuestionIdComposite
        }

    }

    set(GroupUsers) {
        key(groupId)
        UserId
    }

    set(GroupPhonesInvited) {
        key(groupId)
        Phone
    }

}

package question {

    id(QuestionIdComposite)

    id(QuestionId)

    hash(Question) {
        key(questionId)
        + creatorId
        + a
        + b
    }

    set(Questions) {
        key(category)
        QuestionIdComposite
    }

}

package userland <<Cloud>> {

    hash(PhysicalDevice) {
        + phone
        + deviceId
    }

    hash(FacebookAccount) {
        + token
    }

}

package legend <<Rect>> #White/Gainsboro {

    note top of "Id Key"
        Id keys are special,
        they produce auto-
        incrementing units
    end note

    id("Id Key")

    hash("Hash Key") {
        key(token)
        + prop 1
        + prop 2
        + ...
        + prop n
    }

    int("Int Key") {
        key(token)
        $intval
    }

    list("List Key") {
        key(token)
        $type
    }

    set("Set Key") {
        key(token)
        $type
    }

    json("Json Key") {
        key(token)
        - json field 1
        - json field 2
        - ...
        - json field n
    }

    simple("Simple Key") {
        key(token)
        $type
    }

}

FacebookAccount -* FacebookInfo
FacebookInfo --* FacebookUser
GroupId --* Group
GroupId ---* GroupQuestions
GroupId --* GroupEvents
GroupId --* GroupUser
GroupId --* GroupUserQuestion
GroupId --* GroupUsers
GroupId ---* GroupPhonesInvited
QuestionId --* Question
Phone --* PhoneGroupsInvited
Phone --* UserPhoneLabel
PhysicalDevice --* Device
PhysicalDevice --* Phone
PhysicalDevice --* PhoneCooldown
UserId --* GroupUser
UserId --* GroupUserQuestion
UserId ---* User
UserId --* UserGroups
UserId --* UserGroupsInvited
UserId --* UserPhonesInvited
UserId ---* UserPhoneLabel
UserId ---* UserQuestions

@enduml